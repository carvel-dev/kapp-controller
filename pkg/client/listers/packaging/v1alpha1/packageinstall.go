// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/packaging/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PackageInstallLister helps list PackageInstalls.
// All objects returned here must be treated as read-only.
type PackageInstallLister interface {
	// List lists all PackageInstalls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PackageInstall, err error)
	// PackageInstalls returns an object that can list and get PackageInstalls.
	PackageInstalls(namespace string) PackageInstallNamespaceLister
	PackageInstallListerExpansion
}

// packageInstallLister implements the PackageInstallLister interface.
type packageInstallLister struct {
	indexer cache.Indexer
}

// NewPackageInstallLister returns a new PackageInstallLister.
func NewPackageInstallLister(indexer cache.Indexer) PackageInstallLister {
	return &packageInstallLister{indexer: indexer}
}

// List lists all PackageInstalls in the indexer.
func (s *packageInstallLister) List(selector labels.Selector) (ret []*v1alpha1.PackageInstall, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PackageInstall))
	})
	return ret, err
}

// PackageInstalls returns an object that can list and get PackageInstalls.
func (s *packageInstallLister) PackageInstalls(namespace string) PackageInstallNamespaceLister {
	return packageInstallNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PackageInstallNamespaceLister helps list and get PackageInstalls.
// All objects returned here must be treated as read-only.
type PackageInstallNamespaceLister interface {
	// List lists all PackageInstalls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PackageInstall, err error)
	// Get retrieves the PackageInstall from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PackageInstall, error)
	PackageInstallNamespaceListerExpansion
}

// packageInstallNamespaceLister implements the PackageInstallNamespaceLister
// interface.
type packageInstallNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PackageInstalls in the indexer for a given namespace.
func (s packageInstallNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PackageInstall, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PackageInstall))
	})
	return ret, err
}

// Get retrieves the PackageInstall from the indexer for a given namespace and name.
func (s packageInstallNamespaceLister) Get(name string) (*v1alpha1.PackageInstall, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("packageinstall"), name)
	}
	return obj.(*v1alpha1.PackageInstall), nil
}
