// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/installpackage/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstalledPackageLister helps list InstalledPackages.
type InstalledPackageLister interface {
	// List lists all InstalledPackages in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.InstalledPackage, err error)
	// InstalledPackages returns an object that can list and get InstalledPackages.
	InstalledPackages(namespace string) InstalledPackageNamespaceLister
	InstalledPackageListerExpansion
}

// installedPackageLister implements the InstalledPackageLister interface.
type installedPackageLister struct {
	indexer cache.Indexer
}

// NewInstalledPackageLister returns a new InstalledPackageLister.
func NewInstalledPackageLister(indexer cache.Indexer) InstalledPackageLister {
	return &installedPackageLister{indexer: indexer}
}

// List lists all InstalledPackages in the indexer.
func (s *installedPackageLister) List(selector labels.Selector) (ret []*v1alpha1.InstalledPackage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstalledPackage))
	})
	return ret, err
}

// InstalledPackages returns an object that can list and get InstalledPackages.
func (s *installedPackageLister) InstalledPackages(namespace string) InstalledPackageNamespaceLister {
	return installedPackageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstalledPackageNamespaceLister helps list and get InstalledPackages.
type InstalledPackageNamespaceLister interface {
	// List lists all InstalledPackages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.InstalledPackage, err error)
	// Get retrieves the InstalledPackage from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.InstalledPackage, error)
	InstalledPackageNamespaceListerExpansion
}

// installedPackageNamespaceLister implements the InstalledPackageNamespaceLister
// interface.
type installedPackageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstalledPackages in the indexer for a given namespace.
func (s installedPackageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstalledPackage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstalledPackage))
	})
	return ret, err
}

// Get retrieves the InstalledPackage from the indexer for a given namespace and name.
func (s installedPackageNamespaceLister) Get(name string) (*v1alpha1.InstalledPackage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("installedpackage"), name)
	}
	return obj.(*v1alpha1.InstalledPackage), nil
}
