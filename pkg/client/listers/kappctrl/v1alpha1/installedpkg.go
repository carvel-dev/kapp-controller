// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/kappctrl/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstalledPkgLister helps list InstalledPkgs.
type InstalledPkgLister interface {
	// List lists all InstalledPkgs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.InstalledPkg, err error)
	// InstalledPkgs returns an object that can list and get InstalledPkgs.
	InstalledPkgs(namespace string) InstalledPkgNamespaceLister
	InstalledPkgListerExpansion
}

// installedPkgLister implements the InstalledPkgLister interface.
type installedPkgLister struct {
	indexer cache.Indexer
}

// NewInstalledPkgLister returns a new InstalledPkgLister.
func NewInstalledPkgLister(indexer cache.Indexer) InstalledPkgLister {
	return &installedPkgLister{indexer: indexer}
}

// List lists all InstalledPkgs in the indexer.
func (s *installedPkgLister) List(selector labels.Selector) (ret []*v1alpha1.InstalledPkg, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstalledPkg))
	})
	return ret, err
}

// InstalledPkgs returns an object that can list and get InstalledPkgs.
func (s *installedPkgLister) InstalledPkgs(namespace string) InstalledPkgNamespaceLister {
	return installedPkgNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstalledPkgNamespaceLister helps list and get InstalledPkgs.
type InstalledPkgNamespaceLister interface {
	// List lists all InstalledPkgs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.InstalledPkg, err error)
	// Get retrieves the InstalledPkg from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.InstalledPkg, error)
	InstalledPkgNamespaceListerExpansion
}

// installedPkgNamespaceLister implements the InstalledPkgNamespaceLister
// interface.
type installedPkgNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstalledPkgs in the indexer for a given namespace.
func (s installedPkgNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstalledPkg, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstalledPkg))
	})
	return ret, err
}

// Get retrieves the InstalledPkg from the indexer for a given namespace and name.
func (s installedPkgNamespaceLister) Get(name string) (*v1alpha1.InstalledPkg, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("installedpkg"), name)
	}
	return obj.(*v1alpha1.InstalledPkg), nil
}
